--- 
title: How to add project to User Library
description: This tutorial explains how to add some modules to Jamoma User Library
author: [Jamoma, Julien Rabin]
created_at: 2010/11/11
tags: []
objref: []
---

As a community driven project, Jamoma Modular includes a growing number of modules sharded by users and developpers. If you feel to share your work as well, follow these steps to add your work to Jamoma User Library.

Let's start by opening Terminal.app. Then, (assuming you previously installed Jamoma source code from "Github":gh), from the command line, go to the main Jamoma folder :

bc. cd /path/to/my/main/Jamoma

After having made sure your Jamoma repository is up to date (or run @git pull@ if you have not done so), let's add our project as a Git "submodule":http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html of Jamoma. We will add our project to the _UserLib_ folder inside the main Jamoma folder where all users' project reside. Type the following command in the Terminal window to do so :

bc. git submodule add git@github.com:username/myUserLib.git UserLib/myUserLib

!images/add_submodule_1.png!

Once our project is added, we can initialize the submodule in which it is contained with @git submodule init@. If no problem occured, the Terminal window should print that the submodule correctly registered, as shown in the second illustration below.

!images/add_submodule_2.png!

!images/add_submodule_3.png!

Then, you need to update the list of submodules using @git submodule update@. As with any other changes made, you need to commit them to your local repository. Be sure to add a log message using the @-m@ option so other users can explicitely know about your addition to the user lib.

!images/add_submodule_4.png!

You can now run @git push origin HEAD@ to upload your addition to the main repository. Users will find your project in the _UserLib_ folder on next time they pull from Github.

!images/add_submodule_5.png!

!images/add_submodule_6.png!

bq. For convenience, you may want your project to be available for non Git-experienced users, for example as a .zip archive. Note that Github is smart enough to build an archive for any tagged project. From your project directory, run @git tag <your version number>@ followed by @git push --tags@


