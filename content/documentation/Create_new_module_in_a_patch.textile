--- 
title: New module in a patch
description: This tutorial explains how to create new module in a patch
author: [Jamoma, Julien Rabin]
created_at: 2010/11/11
tags: []
objref: [jmod.layout, jmod.degrade~]
---

Jamoma Modular can really make the design of a Max interactive application easier. Start by creating a module in a patch using one of the following options.


h3. Using Jamoma modules as abstractions

Modules can be created as "abstractions":http://www.cycling74.com/docs/max5/vignettes/core/abstractions.html, just like any regular Max patch saved to disk. In Max, open a blank patcher window and double-click in the window or press the %(kbd)n% key to create a new object.


Once the object box is created, type in the name of the desired module. In this example, we will create a "jmod.degrade~":jmod.degrade~.html module.

!images/new_obj.png!

When you double-click the object box, a window displaying the module GUI will now pop up. Note that by default, the module will be named after its file name.

!images/new_obj_2.png!


You may want to define a specific name to your module by typing an optional argument to the object box.
!images/new_obj_3.png!


bq. Assuming you properly set up Max, note that you can create an object box containing your module by using the %(kbd)SHIFT% + %(kbd)m% key combo.
!images/new_obj_4.png!

h3. Using module as bpatcher

If you prefer to have the GUI displayed in the main patch, Jamoma module are ready to be used within "bpatchers":http://www.cycling74.com/docs/max5/refpages/max-ref/bpatcher.html. Create a bpatcher in your Max window.

!images/new_bpatcher_1.png!

Once an empty bpatcher has been created, select it then right-click to bring up the contextual menu and open its inspector window.

!images/new_bpatcher_2.png!

Within the bpatcher inspector %(seq)1%, scroll down to the %(samp)Patcher File% item, then click the %(samp)Choose% button  %seq2% to navigate through the files on your computer and select the desired Jamoma module. Just like when using modules as object box, you may want to specify a specific name set as argument %(seq)3%.

!images/new_bpatcher_3.png!

Your module GUI can now be used from within the main Max patch. Note that the bpatcher is automatically resized to match the size of the module GUI.

!images/new_bpatcher_4.png!

bq. Jamoma also have some shortcuts to ease the creation of modules as bpatchers. Use %(kbd)SHIFT;
% + %(kbd)d% or %(kbd)SHIFT% + %(kbd)b% to create a bpatcher box with containers for module name and arguments.

h3. Using jmod.layout

Now that you know how to create an initial module, here is a special module which can come handy to build a whole patch. First, as explained previously, create a bpatcher containing Jamoma module named "jmod.layout":components/jmod.layout.html %(seq)1%. Once the module is initialized, click the top-right %(samp)EDIT% button %(seq)2%.

!images/using_jcom.layout_1.png!

From the floating panel window, select the %(samp)Add% top tab %(seq)1%, then select the desired tab below %(seq)2%. As their name imply, the %(samp)Jamoma% tab will open access to all module within the main Jamoma distribution, whereas the %(samp)UserLib% open access to modules shared by Jamoma users and developers.

!images/using_jcom.layout_2.png!

Jamoma modules are organized into various categories :

- _Audio_, containing modules dedicated to generation and process of audio signal
- _Control_, containing modules dedicated to control of other modules
- _Data_, containing modules dedicated to process of non-audio signal
- _OpenGL_, containing modules dedicated to generation and process of OpenGL-based video
- _Spatialization_, containing modules dedicated to spacialization audio signal
- _Video_, containing modules dedicated to generation and process of matrix-based video signal

Select a category using one of the afore-mentioned menu %(seq)1% and choose a module to insert in your patch by scrolling the menu below %(seq)2%.

!images/using_jcom.layout_3.png!

Once a module selected, you may optionally set a name to the module using the text input field %(seq)1%. By default, "jcom.layout":components/jcom.layout.html will display the module's name and use as a default name for the module. When done, clic the %(samp)button% beside to insert a Jamoma module in your patch %(seq)2%.

You can insert as many modules as you like. When all your modules are created, you can close the window using the %(samp)Done% button %(seq)3%.
!images/using_jcom.layout_4.png!

h3. Summary

- Modules can be created inside regular object boxes or as bpatchers
- Modules can be created using %(kbd)SHIFT% + %(kbd)m%, %(kbd)SHIFT% + %(kbd)d% or %(kbd)SHIFT% + %(kbd)b%
- "jmod.layout":components/jcom.layout.html can be useful to explore the growing list of modules and insert them in a patch