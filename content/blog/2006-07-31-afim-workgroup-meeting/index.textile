---
layout: post
title: AFIM workgroup meeting
kind: article
menu: blog
created_at: 2006-07-31
location: Paris, France
author: Pascal Baltazar
h1: AFIM workgroup meeting
categories:
- framework
- EVE
- mapping
- Integra
- audio-matrix
- hosting-environment
- spatialisation
- sensors
---
_In July a French development team related to a workgroup commissioned by the AFIM (French Association of Musical Computing) had a meeting in Paris. Below is a resume written by Pascal and posted to the Jamoma-devel mailing list:_

First, this group is related to a workgroup commissioned by the AFIM (French Association of Musical Computing). For those reading french, there's a report of our activity here:

"http://didascalie.net/tiki-index.php?page=afim-pagepublique":http://didascalie.net/tiki-index.php?page=afim-pagepublique

(We'll try to translate it some day soon...)

For those not reading French, more or less, we aim at :

* Addressing the practices, tools and professional roles around the several ways of using the sound in the performing arts.
* Establishing a state-of-the-art of the existing and available tools for audio composition and interpretation in the performing arts, and trace a way for future development.

That's on this way that we discovered Jamoma, and also Integra.

Our goals are not so distant of those of the Integra group, even if we are in a different field. That's why I attended one of their meetings in Krakow, to get more informed about their activity. We also have a person in common in both groups, who is Thierry Codhuis, CEO of La Kitchen, Paris. Of course, we look forward to setting up which could be our modes of collaboration with Integra in the future. I'm convinced we have a lot of complementariness as well as converging goals, and that we should succeed finding a way to collaborate... I'll come back to Lamberto, of Integra in the autumn, when we have a clearer picture of where we're going....

So, as a first phase of our future development, we've set up as a kind of parallel group a team that we've called EVE (for Experimental Virtual Environment, or whatever you wish...) This development of a common framework for building audio environments is of course based on Jamoma, and is beginning right now. We plan to have an operational draft at the end of the summer. We'll use it for several projects, and will distribute it to a small circle of users, in order to get some feedback. The aim, for now, is not to widespread it, nor to advertise it, as we consider it as a beta version, and as we will be redacting a documentation along the way....

The developers in the team are:

* Mathieu Chamagne, Nicolas Carrière and Pascal Baltazar, composers.
* Olivier Pfeiffer and François Weber, sound managers for theatre.
* Jean-Michel Couturier, interactive systems designer,
"http://www.blueyeti.fr/en/":http://www.blueyeti.fr/en/
* Jean-Louis Larcebeau and Guy Levesque, sound managers, Tom Mays,
composer, Anne Sedes, academic and composer, Georges Gagneré, stage
director, who will mainly observe the development, and give some
feedback.

What we'll try to achieve this summer consists of:

<a class="fancybox" href="images/diagram.png" data-fancybox-group="eve" title="EVE framework">
<img alt="EVE framework" class="myCell" class="myCell" src="images/diagram-thumb.png"/>
</a>

* A wrapping system, to build automatically the setup with a menu/jit.cellblock system. We will use the "group" system designed by Mathieu, which is a way to hide/show bpatchers by groups, thus making a kind of Mozilla-like Tab system. There will be the possibility to have either a pattrstorage or a cuelist on top of everything, to manage cues and states. We'll also allow the possibility to have preset sub-spaces, for example in auxilliary windows (for example, for audio-matricing : to have matricing presets changing less often than other cues, but although commanded by the main preset management system... There will also be a vu-meter space, to monitor inputs and outputs, and a buffer management system, to dynamically build a bunch of buffers, connected to all the RAM modules. Here comes a little sketch of it, as a fullscreen patch:

<a class="fancybox" href="images/matrix.png" data-fancybox-group="matrix" title="Audio Matrix SeqCon">
<img alt="Audio Matrix SeqCon" class="myCell" class="myCell" src="images/matrix-thumb.png"/>
</a>

* An audio-matricing system, with a multislider interface, to allow progressive sends, based on François's SeqCon Matrix : "http://hapax84.free.fr/telecharg.html":http://hapax84.free.fr/telecharg.htm or
"http://www.macmusic.org/news/view.php/lang/en/id/3620/":http://www.macmusic.org/news/view.php/lang/en/id/3620/
* * A kind of host module, to gather several modules (for example a generator and two filters) and connect them in line mode, and then send them to the matrix. This is to achieve a branch/trunk system and avoid having a thousand inputs to the matrix, when some modules will always be connected in the same way. There will also be a pattrstorage on top of it, and one or several audio send, to route the signal to the matrix and/or the spatialisation module. A little enveloppe follower will be placed at the end of the chain and will return the volume as a flow of data to be mapped anywhere...
* A spatialisation module, to gather Trond's fantastic ambisonics modules, manage trajectories, etc.... Mathieu was thinking about implementing also a dbap (distance-based) module that could become part of the Jamoma distro....
* Several "generative" modules : Audio Input, RAM player (groove~ based), granular synthesis (buffer~-based also), Direct-to-disks (1 to 8 tracks), simple oscillator/synth....
* Several "effects" modules : VST host, Envelope generator (based on multislider), basic reverb, variable-delay, pitch-shift + of course using the modules of the Jamoma distro
* Several mapping modules :
** "simple" one-to-one mappers : (based on Z's ones, already discussed here) : continuous, triggers, thresholds detecters (up and down-front -> triggers), timelines (based on multisliders). I'm thinking to implement them, on a suggestion of Alexander, as different jmod modules (one for each type of mapper), with an argument determining the number of mapper instances (i.e. bpatchers) that would be created inside of one module.
** more sophisticated mapping modules, as the one Mathieu developed with the pmpd objects (Physical models), or a 2d mapping module (based
on something like tap.jit.ali or something...)

* Some input modules :
** A wacom module, that will be developped by Jean-Michel Couturier, who is the developper of the wacom Max external for Mac.
** several sensor inputs, each one based on specific hardware (as La Kitchen's kroonde, WiSe Box... etc...)
** a pre-mapping module to scale the sensors to standard values (e.g. 0.-1.
scale), and some other operations

These two last ones will be developed by Nicolas, so I suggest that Nicolas and Jean-Michel get in contact with Alexander, to get informed of the standardization work Alexander already did in this domain. I will send an e-mail to all three, in order that they can begin discussing these issues.

Some of these modules could also become part of the Jamoma distro, as Mathieu's dpab module, François' VST module, Jean-Michel's wacom module, my simple mappers...
