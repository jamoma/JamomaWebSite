---
layout: post
title: Models embedded in models
h1: Models embedded in models
kind: article
menu: blog
created_at: 2014-01-06
location: Bergen, Norway
author: Trond Lossius
categories:
- Jamoma-0.6
- model
---

When Tim and I wrote the very first paper on Jamoma, <em>"Jamoma: a modular standard for structuring patches in Max":/publications/attachments/jamoma-icmc2006.pdf</em> for the ICMC 2006 conference, we stated that one of the benefits of a standardised way of creating modules in Max is that it _"ensures inter-operability of modules so that they might be reused"_. In the upcoming Jamoma 0.6 release, with its "model-view-controller":http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller separation, this potential is further enhanced.

A filter or a limiter can come in handy in all sorts of audio processing models. Previously this caused us to implement limiters and their parameters several times over for different modules, in a way that could not be considered DRY (Don't Repeat Yourself).

In Jamoma 0.6 it is possible to embed models in models, and the output~ model is one example that makes extensive use of this. It offers saturation and limiter master effects as well as stereo balance, and in 0.6 these functions are impemented by embedding the pre-existing saturation~, limiter~ and balance~ models:

<%= fancyImage @item, "images/embedded-models.png", "images/embedded-models.png", "Models embedded in the output~ model", "embedded-models" %>

The @amenities attribute, when set to none, ensures that the embedded models do not introduce additional audio/foo, preset/foo or view/foo parameters and messages of their own in the model. The result is a nice and clean namespace of parameters and messages, as can be seen from the pop-up menu of the output~.view:

<%= fancyImage @item, "images/output-namespace.png", "images/output-namespace-thumb.png", "output~.model namespace", "embedded-models" %>