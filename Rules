#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/stylesheet/' do
  # don’t filter or layout
end

#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first
# matching rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/”
# for the file “content/about.html”). To select all children,
# grandchildren, … of an item, use the pattern “/about/*/”;
# “/about/*” will also select the parent, because “*” matches
# zero or more characters.

preprocess do
  create_category_pages
end

compile '/' do
  filter :erb
  filter :redcloth
  filter :argh
  layout 'default'
  filter :typogruby
end

##############################################################################
# Style sheets
##############################################################################

route '/css/stylesheet/' do
  '/css/style.css'
end

compile '/css/*/' do
    # compress CSS :)
    #filter :less
    filter :rainpress
end

##############################################################################
# Robots
##############################################################################

route "/robots/" do
  "/robots.txt"
end

compile "/robots/" do
  # nothing - prevents it from being rendered with default layout
end

##############################################################################
# 404
##############################################################################

route "/404/" do
  "/404.html"
end

##############################################################################
# Demo pages - code examples for web development
##############################################################################

route "/demo/fancyBox/iframe/" do
  "/demo/fancyBox/iframe.html"
end

compile "/demo/fancyBox/iframe/" do
  # nothing - prevents it from being rendered with default layout
end

##############################################################################
# Documentation rendering
##############################################################################

# compile '/documentation/*/' do
#   case item[:extension]
#     when 'css'
#       # nothing
#     when 'js'
#       # nothing
#     when 'png'
#       # nothing
#     when 'jpg'
#       # nothing
#     when 'textile'
#       #filter :addref
#       filter :pretextile
#       filter :redcloth, :erb
#       layout 'default'
#       #filter :relativize_paths, :type => :html
#     end
# end

# By default, nanoc use the page name as folder name and add an index.html page (as in first case). Here, unless the page is named "index.something" we keep the page name.

route '/tutorials/*/' do
  case item[:extension]
    when 'css'
      item.identifier.chop + '.' + item[:extension]
    when 'js'
      item.identifier.chop + '.' + item[:extension]
    when 'png'
      item.identifier.chop + '.' + item[:extension]
    when 'jpg'
      item.identifier.chop + '.' + item[:extension]
    when 'textile'
      if item[:content_filename] =~ /\/index.*$/ 
        item.identifier + 'index.html' 
      else 
        item.identifier.chop + '.html'
      end
    end 
end



##############################################################################
# General roule
##############################################################################

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

##############################################################################
# Blog stuff
##############################################################################

route '/blog/' do
  '/blog.html'
end

compile '/blog/archive/' do
  filter :erb
  layout 'default'
  filter :typogruby
end

compile 'blog/feed' do
  filter :erb
end

route 'blog/feed' do
  '/blog/feed.xml'
end

route '/blog/archive/' do
  '/blog/archive.html'
end

compile '/categories/' do
  filter :erb
  layout 'default'
  filter :typogruby
end


##############################################################################
# Front page
##############################################################################

route '/' do
  '/index.html'
end

##############################################################################
# Static content, not used currently
##############################################################################

compile '/static/*/' do
end

route '/static/*/' do
  item.identifier[7..-2]
end

##############################################################################
# Forum: TODO: remove this?
##############################################################################

compile '/forum/' do
  filter :redcloth
  filter :argh
  layout 'forum'
  filter :typogruby
  
end

##############################################################################
# More blog stuff - vategories and single posts
# Might be used with tutorials as well as blog
##############################################################################

route '/categories/' do
  '/categories.html'
end

compile '/categories/*/' do
  filter :erb
  layout 'category'
  filter :typogruby
end

route '/categories/*/' do
  item.identifier.chop + '/index.html'
end

compile %r{^/blog/20[0-9]{2}-[0-9]{2}-[0-9]{2}} do
  if item.binary?
    #nothing
  else
    filter :redcloth
    filter :argh
    layout 'post'
    filter :typogruby
  end
end

route %r{^/blog/20[0-9]{2}-[0-9]{2}-[0-9]{2}} do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    blog_route(item)
  end
end

##############################################################################
# General
##############################################################################

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :pretextile
    filter :redcloth
    filter :argh
    layout 'default'
    filter :typogruby
  end
end

##############################################################################
# TODO: Why do we have additional css stuff here?
##############################################################################

compile '/css/normalize/' do
  filter :rainpress
end

compile '/css/*/' do
  filter :sass, :syntax => :scss
  filter :rainpress
end

route '/css/*/' do
  item.identifier.chop + '.css'
end


##############################################################################
# Generic rendering
##############################################################################

layout '/*/', :erb
